@import url("https://fonts.googleapis.com/css2?family=Pacifico&display=swap");

.font-signature {
  font-family: "Pacifico", cursive;
}

.bg-grid-pattern {
  background-image: linear-gradient(
      to right,
      rgba(233, 10, 10, 0.05) 2px,
      transparent 1px
    ),
    linear-gradient(to bottom, rgba(7, 0, 0, 0.016) 1px, transparent 1.5px);
  background-size: 40px 40px;
  background-position: center;
}
@keyframes gloss {
  0% {
    background-position: -200% center;
  }
  100% {
    background-position: 200% center;
  }
}

.animate-gloss {
  background-image: linear-gradient(
    120deg,
    rgba(0, 200, 255, 0.12) 0%,
    rgba(0, 255, 200, 0.18) 45%,
    rgba(255, 255, 255, 0.06) 100%
  );
  background-size: 200% auto;
  animation: gloss 3s linear infinite;
}
.starfield {
  position: absolute;
  inset: 0;
  z-index: -1;
  overflow: hidden;
  pointer-events: none;
}

.star {
  position: absolute;
  border-radius: 9999px;
  animation: starFall linear infinite, twinkle 20s ease-in-out infinite;
}

.shooting-star {
  position: absolute;
  width: 300px;
  height: 10px;
  background: linear-gradient(-45deg, white, transparent);
  transform: rotate(-45deg);
  opacity: 0.9;
  animation: shootingStar 10s ease-in-out forwards;
  z-index: 0;
  border-radius: 50%;
}

@keyframes starFall {
  from {
    transform: translateY(-100vh);
  }
  to {
    transform: translateY(100vh);
  }
}

@keyframes twinkle {
  0%,
  100% {
    opacity: 0.2;
  }
  50% {
    opacity: 1;
  }
}

@keyframes shootingStar {
  0% {
    opacity: 0;
    transform: translate(0, 0);
  }
  10% {
    opacity: 1;
  }
  100% {
    transform: translate(-150vw, 150vh);
    opacity: 0;
  }
}

@keyframes parallaxSlow {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-20px);
  }
}

@keyframes parallaxFast {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-50px);
  }
}

.animate-parallaxSlow {
  animation: parallaxSlow 60s linear infinite alternate;
}
.animate-parallaxFast {
  animation: parallaxFast 40s linear infinite alternate;
}
